#include <stdio.h>
#include "utile.h"
#include "tokens.h"
#include "commande.h"
#include "document.h"

//Les règles de la grammaire:
boolean _PROG();
boolean _LIST_COM();
boolean _COM();
boolean _COM_DB();
boolean _COM_COL();
boolean _PARAM_INSERT((Document* p_document);

boolean _DOC((Document* p_document);
boolean _LIST_PAIR((Document* p_document);
boolean _LIST_PAIR_AUX((Document* p_document);
boolean _LIST_PAIR_AUX_AUX((Document* p_document);
boolean _PAIR();
boolean _VALEUR();
boolean _TAB(Tableau* p_tableau);
boolean _LIST_VAL(Tableau* p_tableau);
boolean _LIST_VAL_AUX(Tableau* p_tableau);
boolean _LIST_VAL_AUX_AUX(Tableau* p_tableau);

//La dernière commande qu'on a lue:
static Commande commande;
//La dernière paire qu'on a lue:
static Paire paire;
//La dernière valeur qu'on a lue:
static Valeur valeur;


static typetoken token;
static boolean follow_token=false;


extern int yylex();
extern char* yytext;

typetoken _lire_token()
{
	if(follow_token==true)
	{
		follow_token=false;
		return token;
	}
	else
	{
		return (typetoken) yylex();
	}
}

char* _get_token()
{
	return yytext;
}

int main(int argc, char * argv)
{
	token = _lire_token();
	if (_PROG() == true) 
	{
		printf("\npas d'erreurs lexicales\n");
		printf("\npas d'erreurs syntaxiques\n");
	}
	else 
	{
		if(token==-1)
			printf("\nerreur lexicale\n");
		else
			printf("\nerreur syntaxique\n");
	}
	
	return 0;
}

// PROG : LIST_COM
boolean _PROG()
{
	boolean result;
	if(_LIST_COM())
	{
		result=true;
	}else
	{
		result=false;
	}
	return result;
}

// LIST_COM : COM ';' LIST_COM | EPSILON
boolean _LIST_COM()
{
	boolean result;
	if(token==0)
	{	
		result=true;
	}else if(_COM())
	{
		token=_lire_token();
		if(token==PVIRG)
		{
			token=_lire_token();
			if(_LIST_COM())
			{
				result=true;
			}else
			{
				result=false;
			}
		}else
		{
			result=false;
		}
	}else
	{
		result=false;
	}
	return result;
}

// COM : 'db' '.' COM_DB
boolean _COM()
{
	boolean result;
     	if(token==DB)
	{
		token=_lire_token();
		if(token==POINT)
		{
			token=_lire_token();
			if(_COM_DB())
			{
				result=true;
			}else
			{
				result=false;
			}
		}else
		{
			result=false;
		}
	}else
	{
		result = false;
	}
	return result;
}


// COM_DB :  idf '.' COM_COL
boolean _COM_DB()
{
	boolean result;
	if(token==IDF)
	{
		token=_lire_token();
		if(token==POINT)
		{
			token=_lire_token();
			if(_COM_COL())
			{
				result=true;
			}else
			{
				result=false;
			}
		}else
		{
			result=false;
		}
	}else
	{
		result=false;
	}
	return result;
}


// COM_COL : 'insert' '(' PARAM_INSERT ')' | 'find' '(' ')'
boolean _COM_COL()
{
	boolean result;
	if(token==INSERT)
	{
		commande.type=C_INSERT;
		
		//Création du document paramètre de la commande:
		Document* p_document=Malloc(Document);
		*p_document=NULL;
		
		token=_lire_token();	
		if(token==POPEN)
		{
			token=_lire_token();
			if(_PARAM_INSERT(p_document))
			{
				token=_lire_token();
				if(token==PCLOSE)
				{
					commande.parametre.document=*p_document;
					result=true;
				}else
				{
					result=false;
				}
			}else
			{
				result=false;
			}
		}else
		{
			result=false;
		}
	}else if(token==FIND)
	{
		commande.type=C_FIND;
		token=_lire_token();
		if(token==POPEN)
		{
			token=_lire_token();
			if(token==PCLOSE)
			{
				result=true;
			}else
			{
				result=false;
			}
		}else
		{
			result=false;
		}
	}else
	{
		result=false;
	}
	return result;
}

// PARAM_INSERT : DOC
boolean _PARAM_INSERT(Document* p_document)
{
	boolean result;
	if(_DOC(p_document))
	{
		result=true;
	}else
	{
		result=false;
	}
	return result;
}

// DOC: '{' LIST_PAIR '}'
boolean _DOC(Document* p_document)
{
	boolean result;
	if(token==ACOOPEN)
	{
		token=_lire_token();
		if(_LIST_PAIR(Document* p_document))
		{
			token=_lire_token();
			if(token==ACOCLOSE)
			{
				result=true;
			}else
			{
				result=false;
			}
		}else
		{
			result=false;
		}
	}else
	{
		result=false;
	}
	return result; 
}

// LIST_PAIR: LIST_PAIR_AUX | EPSILON
boolean _LIST_PAIR(Document* p_document)
{
	boolean result;
	if(token==ACOCLOSE)
	{
		follow_token=true;
		result=true;
	}else if(_LIST_PAIR_AUX(p_document))
	{
		result=true;
	}else
	{
		result=false;
	}
	return result;
}

// LIST_PAIR_AUX: PAIR LIST_PAIR_AUX_AUX
boolean _LIST_PAIR_AUX(Document* p_document)
{
	boolean result;
	if(_PAIR())
	{
		//Ajout de la paire au document courant:
		ajouterPaire(p_document,paire);
		
		token=_lire_token();
		if(_LIST_PAIR_AUX_AUX(p_document))
		{
			result=true;
		}else
		{
			result=false;
		}
	}else
	{
		result=false;
	}
	return result;
}

// LIST_PAIR_AUX_AUX: ',' LIST_PAIR_AUX | EPSILON
boolean _LIST_PAIR_AUX_AUX(Document* p_document)
{
	boolean result;
	if(token==ACOCLOSE)
	{
		follow_token=true;
		result=true;
	}else if(token==VIRG)
	{
		token=_lire_token();
		if(_LIST_PAIR_AUX(p_document))
		{
			result=true;
		}else
		{
			result=false;
		}
	}else
	{
		result=false;
	}
	return result; 
}

// PAIR: idf ':' VALEUR
boolean _PAIR()
{
	boolean result;
	if(token==IDF)
	{
		copier_chaine(&(paire.champ),_get_token());
		token=_lire_token();
		if(token==DPOINTS)
		{
			token=_lire_token();
			if(_VALEUR())
			{
				paire.valeur=valeur;
				result=true;
			}else
			{
				result=false;
			}
		}else
		{
			result=false;
		}
	}else
	{
		result=false;
	}
	return result; 
}

// VALEUR: entier | decimal | string | regexp | 'null' | 'true'	| 'false' | 'MinKey' | 'MaxKey'	| DOC | TAB
boolean _VALEUR()
{
	//Création du document et du tableau qui peuvent être des valeurs:
	Document* p_document=Malloc(Document);
	*p_document=NULL;
	Tableau* p_tableau=Malloc(Tableau);
	*p_tableau=NULL;
	
	boolean result;
	if(token==ENTIER)
	{
		valeur.type=T_ENTIER;
		valeur.parametre.entier=atoi(_get_token());
		result=true;
	}else if(token==DECIMAL)
	{
		valeur.type=T_DECIMAL;
		valeur.parametre.decimal=(double)atof(_get_token());
		result=true;
	}else if(token==STRING)
	{
		valeur.type=T_STRING;
		copier_chaine(&(valeur.parametre.chaine),_get_token());
		result=true;
	}else if(token==REGEXP)
	{
		valeur.type=T_REGEXP;
		copier_chaine(&(valeur.parametre.chaine),_get_token());
		result=true;
	}else if(token==NUL)
	{
		valeur.type=T_NULL;
		result=true;
	}else if(token==TRUE)
	{
		valeur.type=T_BOOL;
		valeur.parametre.bool=true;
		result=true;
	}else if(token==FALSE)
	{
		valeur.type=T_BOOL;
		valeur.parametre.bool=false;
		result=true;
	}else if(token==MINKEY)
	{
		valeur.type=T_MINKEY;
		result=true;
	}else if(token==MAXKEY)
	{
		valeur.type=T_MAXKEY;
		result=true;
	}else if(_DOC(p_document))
	{
		valeur.type=T_DOC;
		valeur.parametre.document=*document;
		result=true;
	}else if(_TAB(p_tableau))
	{
		valeur.type=T_TAB;
		valeur.parametre.tableau=*tableau;
		result=true;
	}else
	{
		result=false;
	}
	return result; 
}

	

// TAB : '[' LIST_VAL ']'
boolean _TAB(Tableau* p_tableau)
{
	boolean result;
	if(token==CROOPEN)
	{
		token=_lire_token();
		if(_LIST_VAL(p_tableau))
		{
			token=_lire_token();
			if(token==CROCLOSE)
			{
				result=true;
			}else
			{
				result=false;
			}
		}else
		{
			result=false;
		}
	}else
	{
		result=false;
	}
	return result; 	
}

// LIST_VAL: LIST_VAL_AUX | EPSILON
boolean _LIST_VAL(Tableau* p_tableau)
{
	boolean result;
	if(token==CROCLOSE)
	{
		follow_token=true;
		result=true;
	}else if(_LIST_VAL_AUX(p_tableau))
	{
		result=true;
	}else
	{
		result=false;
	}
	return result; 
}

// LIST_VAL_AUX: VALEUR LIST_VAL_AUX_AUX
boolean _LIST_VAL_AUX(Tableau* p_tableau)
{
	boolean result;
	if(_VALEUR())
	{
		ajouterValeur(p_tableau,valeur);
		token=_lire_token();
		if(_LIST_VAL_AUX_AUX(p_tableau))
		{
			result=true;
		}else
		{
			result=false;
		}
	}else
	{
		result=false;
	}
	return result; 
}

// LIST_VAL_AUX_AUX: ',' LIST_VAL_AUX | EPSILON
boolean _LIST_VAL_AUX_AUX(Tableau* p_tableau)
{
	boolean result;
	if(token==CROCLOSE)
	{
		follow_token=true;
		result=true;
	}else if(token==VIRG)
	{
		token=_lire_token();
		if(_LIST_VAL_AUX(p_tableau))
		{
			result=true;
		}else
		{
			result=false;
		}
	}else
	{
		result=false;
	}
	return result; 
}
